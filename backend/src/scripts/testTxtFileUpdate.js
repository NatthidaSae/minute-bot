#!/usr/bin/env node

require('dotenv').config({ path: require('path').join(__dirname, '../../.env') });
const googleDriveService = require('../services/googleDriveService');

async function testTxtFileUpdate() {
  console.log('üß™ Testing .txt File Update in Google Drive\n');
  
  try {
    // Initialize Google Drive service
    await googleDriveService.initialize();
    console.log('‚úÖ Google Drive service initialized');
    
    // Get folder ID
    const folderId = process.env.GOOGLE_DRIVE_FOLDER_ID;
    
    // Create a test .txt file first
    console.log('\nüìù Creating test .txt file...');
    const testFileName = `test_transcript_${Date.now()}.txt`;
    const originalContent = `Meeting Transcript
Date: ${new Date().toLocaleDateString()}

Attendees: John, Jane, Bob

John: Let's discuss the project status.
Jane: The development is on track.
Bob: We need to finalize the timeline.

[End of transcript]`;
    
    const createdFile = await googleDriveService.uploadFile(testFileName, originalContent, folderId);
    console.log(`‚úÖ Created file: ${testFileName} (ID: ${createdFile.id})`);
    
    // Wait a moment
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // Now append a summary
    console.log('\nüìù Appending summary to file...');
    const summaryText = `

========================================
MEETING SUMMARY (Generated on ${new Date().toLocaleDateString()})
========================================

ATTENDEES
---------
John Doe
Jane Smith
Bob Johnson

KEY DECISIONS
-------------
1. Continue with current project timeline
2. Schedule weekly check-ins

ACTION ITEMS
------------
1. Finalize project timeline (Assigned to: Bob Johnson) [Due: Next Friday]
2. Set up weekly meetings (Assigned to: Jane Smith)

DISCUSSION HIGHLIGHTS
--------------------
1. Project is currently on track
2. Need for better timeline visibility

NEXT STEPS
----------
1. Send updated timeline to all stakeholders
2. Begin weekly status meetings

---
This summary was automatically generated by the Meeting Summary Bot.
`;
    
    const updatedContent = originalContent + summaryText;
    
    // Update the file
    await googleDriveService.updateFile(createdFile.id, updatedContent);
    console.log('‚úÖ File updated with summary');
    
    // Verify the update by downloading
    console.log('\nüîç Verifying update...');
    const buffer = await googleDriveService.downloadFile(createdFile.id);
    const downloadedContent = buffer.toString('utf-8');
    
    console.log(`Original length: ${originalContent.length} characters`);
    console.log(`Updated length: ${downloadedContent.length} characters`);
    console.log(`Added: ${downloadedContent.length - originalContent.length} characters`);
    
    if (downloadedContent.includes('MEETING SUMMARY')) {
      console.log('\n‚úÖ SUCCESS: Summary found in updated file!');
      
      // Show a preview
      console.log('\nüìÑ File content preview:');
      console.log('---START---');
      console.log(downloadedContent.substring(0, 200) + '...');
      console.log('...');
      console.log(downloadedContent.substring(downloadedContent.length - 200));
      console.log('---END---');
    } else {
      console.log('\n‚ùå FAILED: Summary not found in file');
    }
    
    // Clean up - delete test file
    console.log('\nüßπ Cleaning up test file...');
    await googleDriveService.drive.files.delete({ fileId: createdFile.id });
    console.log('‚úÖ Test file deleted');
    
  } catch (error) {
    console.error('\n‚ùå Test failed:', error);
    console.error('Error details:', error.message);
    if (error.response) {
      console.error('API Response:', error.response.data);
    }
  }
}

// Run the test
testTxtFileUpdate();